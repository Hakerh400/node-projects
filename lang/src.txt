type (->)

comb_k   :: a -> b -> a
comb_s   :: (a -> b -> c) -> (a -> b) -> a -> c

type Bool

true     :: Bool
false    :: Bool
bool_exa :: a -> a -> Bool -> a

type Nat

zero     :: Nat
suc      :: Nat -> Nat
nat_exa  :: a -> (Nat -> a -> a) -> Nat -> a
minimize :: (Nat -> Bool) -> Nat

type List

nil      :: List a
cons     :: a -> List a -> List a
list_exa :: a -> (b -> List b -> a -> a) -> List b -> a

---------------------------------------------------------------------------------------------------------------------------------------

00. comb_k   :: a -> b -> a
00. comb_s   :: (a -> b -> c) -> (a -> b) -> a -> c
00. true     :: Bool
00. false    :: Bool
00. bool_exa :: a -> a -> Bool -> a
00. zero     :: Nat
00. suc      :: Nat -> Nat
00. nat_exa  :: a -> (Nat -> a -> a) -> Nat -> a
00. minimize :: (Nat -> Bool) -> Nat
00. nil      :: List a
00. cons     :: a -> List a -> List a
00. list_exa :: a -> (b -> List b -> a -> a) -> List b -> a

---------------------------------------------------------------------------------------------------------------------------------------

00. comb_k   :: a -> b -> a
01. comb_s   :: (a -> b -> c) -> (a -> b) -> a -> c
02. bool_exa :: a -> a -> Bool -> a
03. nat_exa  :: a -> (Nat -> a -> a) -> Nat -> a
04. list_exa :: a -> (b -> List b -> a -> a) -> List b -> a