(() => {
  'use strict'

  const base = a => a
    (a => a => a => a => a => a)
    (a => a
      (a => a
        (a => a
          (a => a
            (a => b => a + b)
            (a => +a))
          (a => a
            (a => !a)
            (a => b => b [a])))
        (a => a
          (a => b => c => c [a] (b))
          (a => [a])))
      (a => a
        (a => b => c => a (c) (b (c)))
        (a => b => a)))

  const snd_arg = base (base)
      , base_snd = base (snd_arg)
      , iota = base_snd (snd_arg)
      , i = iota (iota)
      , k = iota (iota (i))
      , s = iota (k)
      , d = s (k (s)) (k)
      , f = s (d (d) (s)) (k (k))
      , fi = f (i)
      , fst_arg = k
      , arg0 = fi (fst_arg)
      , arg1 = fi (snd_arg)
      , base_func = base_snd (k)
      , base_func_0 = arg0 (base_func)
      , base_func_1 = arg1 (base_func)
      , base_func_00 = arg0 (base_func_0)
      , base_func_01 = arg1 (base_func_0)
      , base_func_10 = arg0 (base_func_1)
      , base_func_11 = arg1 (base_func_1)
      , base_func_000 = arg0 (base_func_00)
      , base_func_001 = arg1 (base_func_00)
      , base_func_010 = arg0 (base_func_01)
      , base_func_011 = arg1 (base_func_01)
      , add = base_func_000
      , to_num = base_func_001
      , not = base_func_010
      , get = base_func_011
      , met = base_func_10
      , sngl = base_func_11
      , dd = s (d) (i)
      , dup = s (add) (i)
      , fa = not (add)
      , tr = not (fa)
      , n0 = add (fa) (fa)
      , n1 = add (tr) (fa)
      , inc = add (n1)
      , n2 = inc (n1)
      , n3 = inc (n2)
      , n4 = inc (n3)
      , n5 = inc (n4)
      , n6 = inc (n5)
      , n7 = inc (n6)
      , n8 = dup (n4)
      , n9 = inc (n8)
      , n10 = inc (n9)
      , n11 = inc (n10)
      , n16 = dup (n8)
      , n18 = add (n16) (n2)
      , n32 = dup (n16)
      , n64 = dup (n32)
      , n_7 = dup (n64)
      , n_8 = dup (n_7)
      , n_9 = dup (n_8)
      , n_10 = dup (n_9)
      , n_11 = dup (n_10)
      , n_12 = dup (n_11)
      , n_13 = dup (n_12)
      , n_14 = dup (n_13)
      , n_15 = dup (n_14)
      , n_16 = dup (n_15)
      , n_17 = dup (n_16)
      , n_18 = dup (n_17)
      , n_19 = dup (n_18)
      , n_20 = dup (n_19)
      , mul_4 = dd (dup)
      , mul_16 = dd (mul_4)
      , mul_256 = dd (mul_16)
      , mul_2_16 = dd (mul_256)
      , mul_2_32 = dd (mul_2_16)
      , mul_2_64 = dd (mul_2_32)
      , mul_2_128 = dd (mul_2_64)
      , mul_2_256 = dd (mul_2_128)
      , mul_2_512 = dd (mul_2_256)
      , mul_2_1024 = dd (mul_2_512)
      , large_num = mul_2_128 (n1)
      , num_n = mul_2_1024 (n1)
      , head = get (n0)
      , gets = f (d (d) (get)) (f (add) (i))
      , gets0 = gets (n0)
      , und = head (n0)
      , nan = dup (und)
      , char_0 = gets0 (n0)
      , char_1 = gets0 (n1)
      , char_2 = gets0 (n2)
      , char_3 = gets0 (n3)
      , char_4 = gets0 (n4)
      , char_5 = gets0 (n5)
      , char_6 = gets0 (n6)
      , char_7 = gets0 (n7)
      , char_8 = gets0 (n8)
      , char_9 = gets0 (n9)
      , char_a = gets (n1) (fa)
      , char_d = gets (n2) (und)
      , char_e = gets (n4) (fa)
      , char_f = gets0 (fa)
      , char_i = gets (n5) (und)
      , char_l = gets (n2) (fa)
      , char_n = gets (n1) (und)
      , char_r = gets (n1) (tr)
      , char_s = gets (n3) (fa)
      , char_t = gets0 (tr)
      , char_u = gets (n2) (tr)
      , char_y = gets (n7) (num_n)
      , char_I = gets0 (num_n)
      , char_N = gets0 (nan)
      , char_dot = gets (n1) (large_num)
      , char_plus = gets (n18) (large_num)
      , str_filter = add (char_f) (add (char_i) (add (char_l) (add (char_t) (add (char_e) (char_r)))))
      , str_entries = add (char_e) (add (char_n) (add (char_t) (add (char_r) (add (char_i) (add (char_e) (char_s))))))
      , str_flat = add (char_f) (add (char_l) (add (char_a) (char_t)))
      , arr_und = sngl (und)
      , arr_flat = get (str_flat) (arr_und)
      , native_func = arr_flat
      , flip = f
      , dot = d
      , getsn = flip (gets) (native_func)
      , char_c = gets (n3) (arr_flat)
      , char_o = gets (n6) (arr_flat)
      , str_constructor = add (char_c) (add (char_o) (add (char_n) (add (char_s) (add (char_t) (add (char_r) (add (char_u) (add (char_c) (add (char_t) (add (char_o) (char_r))))))))))
      , get_ctor = get (str_constructor)
      , arr_ctor = get_ctor (arr_und)
      , char_space = gets (n8) (arr_ctor)
      , char_A = gets (n9) (arr_ctor)
      , func_ctor = get_ctor (i)
      , num_ctor = get_ctor (n0)
      , char_m = gets (n11) (num_ctor)
      , str_name = add (char_n) (add (char_a) (add (char_m) (char_e)))
      , str_from = add (char_f) (add (char_r) (add (char_o) (char_m)))
      , n96 = add (n32) (n64)
      , n101 = add (n5) (n96)
      , get_name = get (str_name)
      , str_ctor = get_ctor (char_a)
      , str_String = get_name (str_ctor)
      , str_to = add (char_t) (char_o)
      , str_toString = add (str_to) (str_String)
      , met0 = f (met) (und)
      , to_str = met0 (str_toString)
      , to_strb = met (str_toString)
      , n21 = add (n3) (n18)
      , char_h = get (n1) (to_strb (n21) (n101))
      , str_this = add (char_t) (add (char_h) (add (char_i) (char_s)))
      , str_return = add (char_r) (add (char_e) (add (char_t) (add (char_u) (add (char_r) (char_n)))))
      , mk_func = func_ctor
      , comp = flip (mk_func) (i)
      , str_return_space = add (str_return) (char_space)
      , exec_legacy = d (comp) (add (str_return_space))
      , glob = exec_legacy (str_this)
      , n15 = add (n7) (n8)
      , n31 = add (n15) (n16)
      , n19 = inc (n18)
      , n128 = n_7
      , n192 = add (n64) (n128)
      , n211 = add (n19) (n192)
      , char_p = get (n1) (to_strb (n31) (n211))
      , str_escape = add (char_e) (add (char_s) (add (char_c) (add (char_a) (add (char_p) (char_e)))))
      , escape = exec_legacy (str_escape)
      , str_italics = add (char_i) (add (char_t) (add (char_a) (add (char_l) (add (char_i) (add (char_c) (char_s))))))
      , italics = met0 (str_italics)
      , str_ = to_str (sngl (und))
      , ita_emp = italics (str_)
      , esc_ita_emp = escape (ita_emp)
      , char_C = get (n2) (esc_ita_emp)
      , str_Char = add (char_C) (add (char_h) (add (char_a) (char_r)))
      , str_Code = add (char_C) (add (char_o) (add (char_d) (char_e)))
      , str_fromCharCode = add (str_from) (add (str_Char) (str_Code))
      , sfcc = get (str_fromCharCode) (str_ctor)
      , n40 = add (n8) (n32)
      , n41 = inc (n40)
      , char_open_paren = sfcc (n40)
      , char_closed_paren = sfcc (n41)
      , str_return_open_paren = add (str_return) (char_open_paren)
      , mk_exec_str = d (add (str_return_open_paren)) (f (add) (char_closed_paren))
      , exec = d (comp) (mk_exec_str)
      , n29 = add (n8) (n21)
      , n61 = add (n29) (n32)
      , char_eq = sfcc (n61)
      , n62 = inc (n61)
      , char_lt = sfcc (n62)
      , str_arrow = add (char_eq) (char_lt)
      , mk_func_head = flip (add) (str_arrow)
      , n98 = add (n2) (n96)
      , char_b = sfcc (n98)
      , func_arg_a = mk_func_head (char_a)
      , func_arg_b = mk_func_head (char_b)
      , mk_bin_func_head = add (add (func_arg_a) (func_arg_b))
      , mk_bin_func_body = d (add (char_a)) (f (add) (char_b))
      , mk_op_func_str = d (mk_bin_func_head) (mk_bin_func_body)
      , mk_op_func = d (exec) (mk_op_func_str)
      , n45 = add (n5) (n40)
      , char_minus = sfcc (n45)
      , sub = mk_op_func (char_minus)
      , n124 = sub (n128) (n4)
      , char_pipe = sfcc (n124)
      , str_or = dup (char_pipe)
      , or = mk_op_func (str_or)
      , fget = f (get)
      , get_glob = fget (glob)
      , n103 = add (n7) (n96)
      , char_g = sfcc (n103)
      , n100 = sub (n103) (n3)
      , n85 = sub (n100) (n15)
      , char_U = sfcc (n85)
      , str_Upper = add (char_U) (add (char_p) (add (char_p) (add (char_e) (char_r))))
      , str_Case = add (char_C) (add (char_a) (add (char_s) (char_e)))
      , str_toUpperCase = add (str_to) (add (str_Upper) (str_Case))
      , to_upper = met0 (str_toUpperCase)
      , char_H = to_upper (char_h)
      , n119 = add (n19) (n100)
      , char_w = sfcc (n119)
      , char_W = to_upper (char_w)
      , n33 = inc (n32)
      , char_excm = sfcc (n33)
      , n44 = add (n11) (n33)
      , char_comma = sfcc (n44)
      , str_comma_space = add (char_comma) (char_space)

  const str_alert = add (char_a) (add (char_l) (add (char_e) (add (char_r) (char_t))))
      , alert = get_glob (str_alert)
      , str_console = add (char_c) (add (char_o) (add (char_n) (add (char_s) (add (char_o) (add (char_l) (char_e))))))
      , console = get_glob (str_console)
      , str_log = add (char_l) (add (char_o) (char_g))
      , console_log = get (str_log) (console)
      , log = or (alert) (console_log)
      , str_Hello = add (char_H) (add (char_e) (add (char_l) (add (char_l) (char_o))))
      , str_World = add (char_W) (add (char_o) (add (char_r) (add (char_l) (char_d))))
      , msg = add (str_Hello) (add (str_comma_space) (add (str_World) (char_excm)))
      , result = log (msg)
})()